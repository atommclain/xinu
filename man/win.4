.TH WIN 4
.SH NAME
win \- window driver
.SX driver win
.IX win
.SH SYNOPSIS
.nf
.B #include <tty.h>
.B #include <xwindow.h>
.sp
.B open(device, name)
.B close(device)
.B read(device, buffer, length)
.B write(device, buffer, length)
.B getc(device)
.B putc(device, char)
.B control(device, function, arg1, arg2)
.B init(device)
.SH DESCRIPTION
.PP
The \f2win\f1 device driver provides input and output for
windows that simulate a full-duplex ASCII terminal device.
.PP
The \f2win\f1 driver operates in one of three modes, with switching
between the modes determined dynamically.
In \f2raw mode\f1, it passes incoming characters to the reading
process without further processing.
In \f2cbreak mode\f1,
character echo, and mapping between carriage return and line feed.
In \f2cooked mode\f1 the driver behaves like cbreak mode, but
also handles line editing with backspace and line kill keys.
Characters are processed according to the driver mode when they arrive,
and are placed in a queue from which upper-half routines extract them.
Echoing, presentation of control characters, and editing are controlled
by several fields in the driver control structure,
and may be changed dynamically.
.PP
The upper-half routines behave as follows:
.TP
.B read(device,buffer,length)
Reads up to one line into the user's \f2buffer\f1, stopping on
an END-OF-FILE or NEWLINE character, or after \f2length\f1
characters have been supplied.
In cooked mode, \f2read\f1 blocks until a line has been typed.
As a special case, if \f2length\f1 is zero, the driver reads
the next line of characters from the input buffer without waiting
for the full line to be typed.
.TP
.B write(device,buffer,length)
Writes \f2length\f1 characters from the user's \f2buffer\f1,
mapping CARRIAGE RETURN to NEWLINE as specified by field \f2ocrlf\f1
of the driver control structure.
Write may block if the output exceeds the currently available
buffer space.
.TP
.B getc(device)
Reads a single character and returns it as the function value.
.TP
.B putc(device,char)
Writes character \f2char\f1.
.TP
.B open(device,name,mode)
When called for the window master device, \f2open\f1 allocates a new window
and returns its device descriptor.
\f2Open\f1 has no meaning when the device is a specific window pseudo-device.
.TP
.B close(device)
Closes the window and deallocates associated data structures.
.TP
.B init(device)
Initializes the window driver.
.TP
.B control(device,function,arg1)
Controls the driver and provides non-transfer operations.
The valid functions are:
.nf
.in +0.2i
WCIDLE \- flash cursor in an idle window
WCUPDATE \- update (redraw) the window
WCMOVE \- move the window
WCSIZE \- change the window size
WCASCROLL \- scroll the window so text insertion point is visible
WCKILL \- close and deallocate a window
TCNEXTC \- look ahead at next input character
TCMODER \- switch to raw mod
TCMODEC \- switch to cooked mode
TCMODEK \- switch to cbreak mode
TCECHO \- turn on input echo
TCNOECHO \- turn off input echo
TCICHARS \- return count of input characters
TCINT \- make calling process receive interrupt messages
TCINTCH \- set character that causes interrupt message
TCNOINT \- turn off interrupt message processing
.fi
.in -0.2i
